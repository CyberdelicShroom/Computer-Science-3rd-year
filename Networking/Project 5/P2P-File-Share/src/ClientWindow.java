/**
 * This class provides the interface that the user interacts with. 
 * It is responsible for connecting to the server and maintaining 
 * all input and output from the server and other clients. It listens
 * for input from other clients by forking a new ClientListenerThread 
 * process which handles the input from the other clients.
 * Upon running this class, it prompts the user for their IPv4 address and the 
 * server's IPv4 address, then it initialises a new socket for the client's 
 * connection to the server, initialises the input and output streams of the 
 * socket, then it prompts the user for a unique username and checks whether 
 * it is unique and handles it accordingly, then initialises some arrayLists 
 * and variables, runs the GUI code and finally calls a method to listen 
 * for messages.
 * This class also contains the implementation for AES encryption for
 * sending an encrypted key to securely transfer data.
 * The code generated by the Netbeans IDE which handles the GUI is also present 
 * in this class. This class also contains the code, that had to be manually 
 * implemented, which handles the operations that occur upon clicking the
 * buttons on the GUI.

 * @author Keagan Selwyn Gill
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.*;

public class ClientWindow extends javax.swing.JFrame implements ActionListener {

    public static String ip = "";
    public static boolean isPaused = false;
    public static byte[] message_key;
    public static SecretKey aesKey;
    public static byte[] ciphertext = null;
    public static String encryptedKey;
    public static int receivePort;
    public static ArrayList<File> uploadedFiles;
    public static ArrayList<String> searchFiles;
    public static ArrayList<String> searchNames;
    public static int searchNum;
    static ObjectInputStream ois = null;
    static ObjectOutputStream oos = null;
    static Socket socket = null;
    static String username = "";
    /**
     * Creates new form ClientWindow
     */
    public ClientWindow() {
        initComponents();
        // Starts a new thread to detect when the username has been
        // set so that the title and label can be changed to the clients
        // username
        Thread usernameListener = new Thread(new Runnable() {
            public void run() {
                while(true){
                    if(!username.equals("")) {
                        setTitle(username);
                        clientUsernameLabel.setText(username);
                        break;
                    }
                }
            }
        });
        usernameListener.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        clientUsernameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        message_area = new javax.swing.JTextArea();
        textField = new javax.swing.JTextField();
        progressBarDownload = new javax.swing.JProgressBar();
        progressBarUpload = new javax.swing.JProgressBar();
        btnPause = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 153, 0));
        jLabel1.setText("Client: ");

        clientUsernameLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        clientUsernameLabel.setForeground(new java.awt.Color(0, 204, 51));
        clientUsernameLabel.setText("Default");
        clientUsernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        clientUsernameLabel.setVerticalAlignment(SwingConstants.CENTER);

        message_area.setColumns(20);
        message_area.setRows(5);
        jScrollPane1.setViewportView(message_area);

        textField.addActionListener(this);
        textField.requestFocusInWindow();

        progressBarDownload.setStringPainted(true);
        progressBarDownload.setString("Download");

        progressBarUpload.setStringPainted(true);
        progressBarUpload.setString("Upload");

        btnPause.addActionListener(this);
        btnPause.setText("Pause");

        btnUpload.addActionListener(this);
        btnUpload.setText("Upload files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                            .addComponent(textField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(progressBarDownload, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressBarUpload, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpload)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(btnPause))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(jLabel1)))
                .addContainerGap(9, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(clientUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientUsernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressBarDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBarUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPause)
                    .addComponent(btnUpload))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Performs specific operations depending on whether the upload button,
     * pause button, or enter key has been pressed.
     * 
     * @param e for the action performed
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnUpload) {
            // Operations to execute when user clicks the upload-files button
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jfc.setDialogTitle("Choose file/files: ");
            jfc.setMultiSelectionEnabled(true);
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int returnValue = jfc.showDialog(null, "Select");
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File[] files = jfc.getSelectedFiles();
                for (File file : files) {
                    uploadedFiles.add(file);
                }
            }

        } else if (e.getSource() == btnPause) {
            // Operations to execute when user clicks the pause button
            isPaused = !isPaused;
            if (isPaused) {
                btnPause.setText("Resume");
            } else {
                btnPause.setText("Pause");
            }
        } else {
            // Operations to execute when user clicks the enter key when in
            // the text field
            String text = textField.getText();
            
            if (!text.isEmpty()) {
                sendMessage(text);
                textField.setText("");
                textField.requestFocusInWindow();
            }
        }
    }
    
    /**
     * This method listens for input from other clients by forking a new
     * ClientListenerThread process which handles the input from the other 
     * clients
     */
    public static void listenForMessages() {
        ClientListenerThread clientListenerThread = new ClientListenerThread(username, socket, ois, oos,
                message_area);
        Thread thread = new Thread(clientListenerThread);
        thread.start();
    }
    
    /**
     * Handles messages typed and sent off from the text field
     * 
     * @param text the string containing the text input from the user
     */
    public void sendMessage(String text) {
        // Check for commands
        if (text.startsWith("/")) {
            String help = "Commands: \n- /exit - shut down application\n- /myfiles - list of my uploaded files\n- /search <search string or substring>\n- /download <index corresponding to searched file>\n- /help - show help\n";
            if (text.equals("/exit")) {
                // exit command - disconnects client
                shutdown();
            } else if (text.equals("/help")) {
                // help command - displays list of commands and how to use them
                message_area.append(help);
                return;
            } else if (text.equals("/myfiles")) {
                // displays the files that this user has uploaded
                message_area.append("Uploaded Files:\n");
                for (File file : uploadedFiles) {
                    message_area.append("- " + file.getName() + "\n");
                }
                return;
            } else if (text.startsWith("/search")) {
                // search command - for searching for file names from uploaded
                // files
                if (text.equals("/search ") || text.equals("/search")) {
                    message_area.append("Usage: /search <search string or substring>\n");
                    return;
                }
                searchNum = -1;
                searchFiles = new ArrayList<String>();
                searchNames = new ArrayList<String>();
            } else if (text.startsWith("/download")) {
                // download command - initiates a download request for a file 
                // from a peer using an encrypted key
                if (text.equals("/download ") || text.equals("/download")) {
                    message_area.append("Usage: /download <index corresponding to searched file>\n");
                    return;
                }
                String index = text.split(" ", 2)[1];
                int num = -1;
                try {
                    num = Integer.parseInt(index);
                } catch (NumberFormatException e) {
                    message_area.append("Index given is not an integer\n");
                    return;
                }
                if (num < 0 || num >= searchFiles.size()) {
                    message_area.append("Index is out of bounds\n");
                    return;
                }

                // generate random message-key and AES key, and then encrypt
                // the message-key
                message_key = randomKey();
                // System.out.println("message_key in ClientWindow:\n" + new String(message_key, StandardCharsets.UTF_8));

                try {
                    aesKey = generateAesKey();
                    // System.out.println("AES Key in ClientWindow:");
                    // System.out.println(Base64.getEncoder().encodeToString(aesKey.getEncoded()));
                    // System.out.println("-------------------------------------");
                    ciphertext = AES_ECB_Encrypt(aesKey, message_key);
                    // System.out.println("Ciphertext in ClientWindow:");
                    // System.out.println(Base64.getEncoder().encodeToString(ciphertext));
                    // System.out.println("-------------------------------------");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                text = "@" + searchNames.get(num) + " /download " + Base64.getEncoder().encodeToString(ciphertext) + " " + ip + " " + receivePort + " "
                        + searchFiles.get(num);
            } else {
                message_area.append(help);
                return;
            }
        }

        try {
            // Creates a new Message object with the text payload
            // and the user it is being sent from
            Message msg = new Message(text, username);
            // Write out the Message object
            oos.writeObject(msg);
            oos.flush();
        } catch (IOException e) {
            System.out.println("Error sending message: " + e.getMessage());

        }
    }
    
    // This method generates a random string of 32 characters from a given
    // character set and returns it in the form of a byte array
    static byte[] randomKey() {
        String char_set = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789" + "abcdefghijklmnopqrstuvxyz";
        StringBuilder sb = new StringBuilder(33);

        for (int i = 0; i < 32; i++) {
            int index = (int) (char_set.length() * Math.random());
            sb.append(char_set.charAt(index));
        }

        String str = sb.toString();
        // System.out.println("message_key in randomKey:\n" + str);
        return str.getBytes(StandardCharsets.UTF_8);
    }
    
    // This method generates a 128-bit/16-byte AES key which consists of random
    // characters and returns it in the form of the SecretKey object
    public static SecretKey generateAesKey() throws Exception {
        // Generate AES-128-bit key
        final KeyGenerator generator = KeyGenerator.getInstance("AES");
        generator.init(128);
        return generator.generateKey();
    }
    
    // This method applys AES encryption on the given byte array using the
    // given key and the ECB & PKCS5PAdding options
    public static byte[] AES_ECB_Encrypt(SecretKey key, byte[] message) throws Exception {
        // Init AES-ECB and then encrypt the 'message'
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(message);
    }

    /**
     * Closes socket and streams neatly
     */
    public static void shutdown() {
        try {
            if (ois != null) {
                ois.close();
            }
            if (oos != null) {
                oos.close();
            }
            if (socket != null) {
                socket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.exit(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        int port = 12345;

        // Get local IP address
        try {
            ip = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        // Prompt user to enter their IPv4 address
        ip = JOptionPane.showInputDialog("Enter your IP address: ", ip);

        // Prompt user to enter the server's IPv4 address
        String serverIP = "";
        while (serverIP.isBlank()) {
            serverIP = JOptionPane.showInputDialog("Enter the server IP address: ", "localhost");
        }
        
        // Initialise new socket
        try {
            socket = new Socket(serverIP, port);
        } catch (UnknownHostException e) {
            System.out.println("ERROR: Unknown host");
            System.exit(0);
        } catch (IOException e) {
            System.out.println("ERROR: Couldn't get the connection to " + serverIP);
            System.exit(0);
        }

        // Initialise new input and output streams
        try {
            ois = new ObjectInputStream(socket.getInputStream());
            oos = new ObjectOutputStream(socket.getOutputStream());
        } catch (IOException e) {
            shutdown();
        }
        
        // Prompt user to enter unique username, check uniqueness, if not 
        // unique then keep prompting user to enter unique username until
        // it is unique
        username = JOptionPane.showInputDialog("Enter your unique username: ");
        while (true) {
            if (username.isBlank() || !username.matches("^[0-9A-Za-z]*$") || username.equals("SERVER")) {
                continue;
            }
            try {
                oos.writeObject(new String(username));
                oos.flush();

                String resp = (String) ois.readObject();
                if (resp.equals("username unique")) {
                    break;
                }
            } catch (Exception e) {
                shutdown();
            }
            username = JOptionPane.showInputDialog("That username already exists\nEnter your unique username: ");
        }
        
        // Initialse variables
        uploadedFiles = new ArrayList<File>();
        searchFiles = new ArrayList<String>();
        searchNames = new ArrayList<String>();
        searchNum = -1;
        isPaused = false;

        // Running GUI
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    new ClientWindow().setVisible(true);
                }
            });
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(ClientWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Listen for incoming messages
        listenForMessages();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel clientUsernameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea message_area;
    public static javax.swing.JProgressBar progressBarDownload;
    public static javax.swing.JProgressBar progressBarUpload;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
