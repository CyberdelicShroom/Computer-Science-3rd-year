/** 
 * This class provides the interface that the user interacts with. 
 * It is responsible for connecting to the server and maintaining 
 * all input and output from the server.
 * It provides all the infrastructure for calling, 
 * voice notes and text messages. The code generated by 
 * the Netbeans IDE which handles the GUI is also present 
 * in this class. This class also contains the code, that 
 * had to be manually implemented, which handles the 
 * operations that occur upon clicking 
 * the buttons on the GUI.
 * 
 * @author Keagan Selwyn Gill
 */

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.Socket;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;


public class ClientWindow extends javax.swing.JFrame {
    
    static Socket client;
    static DatagramSocket voiceSocket;
    static DataInputStream in;
    static DataOutputStream out;
    static String hostAddress;
    static int Port;
    static String username;
    String[] group = {};
    Boolean inGroup = false;
    ByteArrayOutputStream byteArrayOutputStream;
    ByteArrayOutputStream receivedVN;
    TargetDataLine targetDataLine;
    boolean stopCapture = false;
    AudioInputStream audioInputStream;
    SourceDataLine sourceDataLine;
    int audioSaved = 0;
    int receivedAudioSaved = 0;
    static sendPacket packetSender = new sendPacket();
    int bufferSize = 65000;
    int udpPort;
    static boolean callFlag = false;
    static String multiCastIP = "225.0.0.1";
    static MulticastSocket groupCallMultiSocket = null;
    /**
     * Creates new form ClientWindow
     */
    public ClientWindow() {
        initComponents();
        setTitle("VoIP Chatroom");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        hostAddressField = new javax.swing.JTextField();
        portField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        message_area = new javax.swing.JTextArea();
        message_text = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        onlineUsersList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        udpPortField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        voip_message_area = new javax.swing.JTextArea();
        voip_message_text = new javax.swing.JTextField();
        voip_sendButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        onlineUsersList2 = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        groupListLabel = new javax.swing.JLabel();
        createGroupButton = new javax.swing.JButton();
        startCallButton = new javax.swing.JButton();
        recordVNButton = new javax.swing.JButton();
        stopRecButton = new javax.swing.JButton();
        playVNButton = new javax.swing.JButton();
        vnInboxButton = new javax.swing.JButton();
        sendVNButton = new javax.swing.JButton();
        saveVNButton = new javax.swing.JButton();
        saveReceivedVNBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 255));
        jLabel3.setText("Connect to Server");

        usernameField.setText("Username");

        hostAddressField.setText("Host");

        portField.setText("8000");

        connectButton.setText("Connect");
        connectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectButtonMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 204));
        jLabel1.setText("Chatroom");

        message_area.setColumns(20);
        message_area.setRows(5);
        jScrollPane1.setViewportView(message_area);

        sendButton.setText("Send");
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendButtonMouseClicked(evt);
            }
        });

        onlineUsersList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(onlineUsersList1);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Online Users:");

        udpPortField.setText("UDP Port");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(message_text, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(hostAddressField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                                .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(portField, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                .addComponent(udpPortField))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(connectButton))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(143, 143, 143)
                            .addComponent(jLabel3))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(179, 179, 179)
                            .addComponent(jLabel1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(udpPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(message_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendButton)))
                    .addComponent(jScrollPane2))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Global Chat", jPanel3);

        voip_message_area.setColumns(20);
        voip_message_area.setRows(5);
        jScrollPane3.setViewportView(voip_message_area);

        voip_sendButton.setText("Send");
        voip_sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                voip_sendButtonMouseClicked(evt);
            }
        });

        onlineUsersList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(onlineUsersList2);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 255));
        jLabel4.setText("VoIP Group Chat");

        groupListLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        groupListLabel.setText("Online users:");

        createGroupButton.setText("Create Group");
        createGroupButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createGroupButtonMouseClicked(evt);
            }
        });

        startCallButton.setText("Start Call");
        startCallButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startCallButtonMouseClicked(evt);
            }
        });

        recordVNButton.setText("Record VN");
        recordVNButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recordVNButtonMouseClicked(evt);
            }
        });

        stopRecButton.setText("Stop recording");
        stopRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopRecButtonMouseClicked(evt);
            }
        });

        playVNButton.setText("Play VN");
        playVNButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playVNButtonMouseClicked(evt);
            }
        });

        vnInboxButton.setText("VN Inbox");
        vnInboxButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vnInboxButtonMouseClicked(evt);
            }
        });
	vnInboxButton.setEnabled(false);

        sendVNButton.setText("Send VN");
        sendVNButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendVNButtonMouseClicked(evt);
            }
        });

        saveVNButton.setText("Save VN");
        saveVNButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveVNButtonMouseClicked(evt);
            }
        });

        saveReceivedVNBtn.setText("Save VN Inbox");
        saveReceivedVNBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveReceivedVNBtnMouseClicked(evt);
            }
        });
	saveReceivedVNBtn.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(voip_message_text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(voip_sendButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(startCallButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendVNButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(7, 7, 7))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(recordVNButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(createGroupButton))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(stopRecButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(vnInboxButton))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(saveVNButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(playVNButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveReceivedVNBtn)))
                        .addContainerGap())))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(groupListLabel))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(groupListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(recordVNButton)
                            .addComponent(createGroupButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stopRecButton)
                            .addComponent(vnInboxButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playVNButton)
                            .addComponent(saveReceivedVNBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveVNButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(voip_sendButton)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(voip_message_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startCallButton)
                        .addComponent(sendVNButton)))
                .addContainerGap())
        );

        jTabbedPane2.addTab("VoIP", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** 
     * This method gets executed when the connect button is clicked.
     * It takes the input from the text fields and stores them in variables,
     * instantiates the necessary sockets and input and output streams,
     * sends the username and UDP port values to the server,
     * and starts a new thread for the input handler.
     */
    private void connectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectButtonMouseClicked
        hostAddress = hostAddressField.getText();
        Port = Integer.parseInt(portField.getText());
        username = usernameField.getText();
        udpPort = Integer.parseInt(udpPortField.getText());
        setTitle("VoIP Chatroom - " + username);
        try {
            client = new Socket(hostAddress,Port);
            voiceSocket = new DatagramSocket(udpPort);
            in = new DataInputStream(client.getInputStream());
            out = new DataOutputStream(client.getOutputStream());

            out.writeUTF(username);
            out.writeInt(udpPort);
            String connected_msg = in.readUTF();
            message_area.setText(connected_msg);
            
            InputHandler inHandler = new InputHandler();
            Thread t = new Thread(inHandler);
            t.start();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_connectButtonMouseClicked

    /** 
     * This method gets executed when the send button on the global chat 
     * tab is clicked. It stores the string entered by the user from the 
     * text field and sends the string out to the server.
     */
    private void sendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendButtonMouseClicked
        try {
            String msg = message_text.getText();
            if(msg.startsWith("/quit")){
                out.writeUTF(msg + " ");
                System.exit(0);
            } else {
                if (!msg.equals("")) {
                    out.writeUTF(msg);
                    message_text.setText("");
                }
            }
        } catch(IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_sendButtonMouseClicked

    /** 
     * This method gets executed when the create group button is clicked. 
     * It gets the selected values from the group list, sorts the values
     * alphabetically, joins the array into a string and send it out to the 
     * server.
     */
    private void createGroupButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createGroupButtonMouseClicked
        if (onlineUsersList2.getSelectedValuesList().isEmpty()) {
            voip_message_area.append("No users selected\n");
        } else {
            List<String> group = onlineUsersList2.getSelectedValuesList();
            String[] groupArray = group.toArray(new String[0]);
            Arrays.sort(groupArray);
            if(group.size() == 1){
                voip_message_area.append("Cannot create a group with only one member.\n");
            } else {
                String groupMembers = String.join("-", groupArray);
                try {
                    out.writeUTF("/group "+groupMembers);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                
            }
        }
    }//GEN-LAST:event_createGroupButtonMouseClicked

    /** 
     * This method gets executed when the send button on the VoIP tab 
     * is clicked. 
     * It stores the string entered by the user from the text field, 
     * checks whether the user is in a group, checks whether the string
     * starts with a specific command and sends the string out to the server.
     */
    private void voip_sendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_voip_sendButtonMouseClicked
        String msg = voip_message_text.getText();
        String groupJoined = "";
        if (inGroup == true) {
            groupJoined = String.join("-", group);
        }
        if(msg.startsWith("/quit")){
            try {
                out.writeUTF(msg + " " + groupJoined);
                System.exit(0);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (inGroup == true){
            try {
                if(msg.startsWith("/name")){
                    out.writeUTF(msg);
                } else {
                    if (!msg.equals("")) {
                        out.writeUTF("/groupMsg " + groupJoined + " " + msg);
                    }
                }
                voip_message_text.setText("");
            } catch(IOException e) {
                e.printStackTrace();
            }
        } else {
            voip_message_area.append("You are not in a group. There is no one to send a message to.\n");
        }
        
        
    }//GEN-LAST:event_voip_sendButtonMouseClicked

    /** 
     * This method gets executed when the record VN button is clicked.
     * It captures input data from the microphone until the Stop button is
     * clicked.
     */
    private void recordVNButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recordVNButtonMouseClicked
        recordVNButton.setEnabled(false);
        stopRecButton.setEnabled(true);
        playVNButton.setEnabled(false);
        saveVNButton.setEnabled(false);
        captureAudio();
    }//GEN-LAST:event_recordVNButtonMouseClicked

    /** 
     * This method gets executed when the stop recording button is clicked.
     * It terminates the capturing of input data from the microphone.
     */
    private void stopRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopRecButtonMouseClicked
        recordVNButton.setEnabled(true);
        stopRecButton.setEnabled(false);
        playVNButton.setEnabled(true);
        saveVNButton.setEnabled(true);
        stopCapture = true;
    }//GEN-LAST:event_stopRecButtonMouseClicked

    /** 
     * This method gets executed when the play VN button is clicked.
     * It plays back all of the audio data that was stored during audio capture.
     */
    private void playVNButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playVNButtonMouseClicked
        playAudio(byteArrayOutputStream);
    }//GEN-LAST:event_playVNButtonMouseClicked

    /** 
     * This method gets executed when the Save VN button is clicked.
     * It creates an input stream on the byte array containing the audio 
     * data and writes it to a file.
     */
    private void saveVNButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveVNButtonMouseClicked
        audioSaved++;
        Thread saveAudioThread = new Thread(){
            @Override
            public void run(){
                try {
                    File outputFile = new File("VoiceNote" + audioSaved + ".wav");
                    byte audioData[] = byteArrayOutputStream.toByteArray();
                    //Get an input stream on the byte array containing the data
                    InputStream byteArrayInputStream = new ByteArrayInputStream(audioData);
                    AudioFormat audioFormat = new AudioFormat(44100, 16, 1, true, false);
                    AudioInputStream audioInputStream2 = new AudioInputStream(byteArrayInputStream, audioFormat, audioData.length/audioFormat.getFrameSize());
                    AudioSystem.write(audioInputStream2, AudioFileFormat.Type.WAVE, outputFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        };
        saveAudioThread.start();
    }//GEN-LAST:event_saveVNButtonMouseClicked

    /** 
     * This method gets executed when the Send VN button is clicked.
     * It sends a command to the server to listen for the incoming voice
     * note data and then sends the voice note data to the server.
     */
    private void sendVNButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendVNButtonMouseClicked
        
        try {
            String groupJoined = String.join("-", group);
              out.writeUTF("/voicenote " + groupJoined);
        } catch (Exception e) {
            e.printStackTrace();
        }
        packetSender.sendVN(hostAddress, byteArrayOutputStream.toByteArray(), 8001);
    }//GEN-LAST:event_sendVNButtonMouseClicked

    /** 
     * This method gets executed when the VN Inbox button is clicked.
     * It plays back all of the audio data that was sent from a group member.
     */
    private void vnInboxButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vnInboxButtonMouseClicked
        playAudio(receivedVN);
    }//GEN-LAST:event_vnInboxButtonMouseClicked

    /** 
     * This method gets executed when the Save VN Inbox button is clicked.
     * It creates an input stream on the byte array containing the audio 
     * data and writes it to a file.
     */
    private void saveReceivedVNBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveReceivedVNBtnMouseClicked
        receivedAudioSaved++;
        Thread saveAudioThread = new Thread(){
            @Override
            public void run(){
                try {
                    File outputFile = new File("ReceivedVoiceNote" + receivedAudioSaved + ".wav");
                    byte audioData[] = receivedVN.toByteArray();
                    //Get an input stream on the byte array containing the data
                    InputStream byteArrayInputStream = new ByteArrayInputStream(audioData);
                    AudioFormat audioFormat = new AudioFormat(44100, 16, 1, true, false);
                    AudioInputStream audioInputStream2 = new AudioInputStream(byteArrayInputStream, audioFormat, audioData.length/audioFormat.getFrameSize());
                    AudioSystem.write(audioInputStream2, AudioFileFormat.Type.WAVE, outputFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        };
        saveAudioThread.start();
    }//GEN-LAST:event_saveReceivedVNBtnMouseClicked
    
    /** 
     * This method gets executed when the Start Call button is clicked.
     * It toggles the starting and disconnection of a user from a group call.
     */
    private void startCallButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startCallButtonMouseClicked
        if (callFlag == false) {
            String groupMembers = String.join("-", group);
            try {
                out.writeUTF("/call:" + groupMembers + ":" + username);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            callFlag = false;
            startCallButton.setText("Start Call");
            try {
                InetAddress groupCallAddr = InetAddress.getByName(multiCastIP);
                groupCallMultiSocket.leaveGroup(groupCallAddr);
                targetDataLine.close();
                String groupMembers = String.join("-", group);
                out.writeUTF("/callEnd:" + groupMembers + ":" + username);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_startCallButtonMouseClicked
    
    /**
     * This method captures microphone audio and it transmits the audio to the
     * targets in a separate thread.
     */
    private void multicastMicAudio() {
        // Sample size 44100, bit size 16, 1 channel
        try {
            AudioFormat audioFormat = new AudioFormat(44100, 16, 1, true, false);
            DataLine.Info dataInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
            if(!AudioSystem.isLineSupported(dataInfo)) {
                System.out.println("Not supported.");
            }
            targetDataLine = (TargetDataLine)AudioSystem.getLine(dataInfo);
            targetDataLine.open();
            targetDataLine.start();
            Thread call = new Thread(new callThread());
            call.start();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    /** 
     * Inner class which runs a thread to capture and send audio for a call
     */
    class callThread extends Thread {
        byte buffer[] = new byte[10000];

        public void run() {
            callFlag = true;
            try {
                InetAddress groupCallAddr = InetAddress.getByName(multiCastIP);
                while (callFlag) {
                    int count = targetDataLine.read(buffer, 0, buffer.length);
                    // Write Data from buffer up to the size of the captured data
                    if (count > 0) {
                        packetSender.sendMulti(buffer, groupCallAddr, 4321);
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
            }
        }
    }
    
    /** 
     * This method listens for and receives voice note data
     */
    public void voiceNoteListener() {
        try {
            receivedVN = new ByteArrayOutputStream();
            byte[] buffer = new byte[bufferSize];
            DatagramPacket p = new DatagramPacket(buffer, bufferSize);
            voiceSocket.receive(p);
            if (buffer[0] == "*".getBytes()[0]) {
                while(true){
                    buffer = new byte[bufferSize];
                    p = new DatagramPacket(buffer, bufferSize);
                    voiceSocket.receive(p);
                    if (buffer[0] == "*".getBytes()[0]) {
                        receivedVN.close();
                        voip_message_area.append("Voice note received!\n");
                        saveReceivedVNBtn.setEnabled(true);
                        vnInboxButton.setEnabled(true);
                        break;
                    } else {
                        receivedVN.write(buffer, 0, buffer.length);
                        voip_message_area.append("Loading...\n");
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
   
    /** 
     * This method closes all data streams of the client 
     * and closes the clients socket.
     */
    public void shutdown() {
        try {
            in.close();
            out.close();
            if(!client.isClosed()){
                client.close();
            }
        } catch (IOException e) {

        }
    }

    /** 
     * This inner class handles all the input coming from the server as well as
     * other clients. It checks whether the input string starts with a 
     * specific command and performs the necessary operations if so.
     * If the input string does not start with any command then it just 
     * gets appended to the message area on the Global Chat tab.
     * If there is an issue running this, then the shutdown
     * method is called.
     */
    class InputHandler implements Runnable {
        String[] clients;
        @Override
        public void run() {
            try {
                String msgin = "";
                while ((msgin = in.readUTF()) != null) {
                    if(msgin.startsWith("clientsJoined:")){
                        // Update clients array and client and group GUI lists
                        // upon user connection
                        clients = msgin.split("-");
                        clients[0] = clients[0].replace("clientsJoined:","");
                        onlineUsersList1.setListData(clients);
                        if(inGroup == false){
                            onlineUsersList2.setListData(clients);
                        }
                    } else if(msgin.startsWith("EXIT:")) {
                        // Update clients array, group array as well as client
                        // and group GUI lists upon user disconnection
                        String[] user = msgin.split(":");
                        List<String> globalClientsList = new ArrayList<String>(Arrays.asList(clients));
                        globalClientsList.remove(user[1]);
                        clients = globalClientsList.toArray(new String[0]);
                        Arrays.sort(clients);
                        onlineUsersList1.setListData(clients);
                        if (inGroup == true) {
                            for (int i = 0; i < group.length; i++){
                                if(group[i].equals(user[1])){
                                    List<String> groupList = new ArrayList<String>(Arrays.asList(group));
                                    groupList.remove(user[1]);
                                    group = groupList.toArray(new String[0]);
                                    Arrays.sort(group);
                                    onlineUsersList2.setListData(group);
                                    voip_message_area.append(user[1]+" has disconnected."+"\n");
                                    break;
                                }
                            }
                        } else {
                            onlineUsersList2.setListData(clients);
                        }
                        
                    } else if (msgin.startsWith("%group:")) {
                        // Handle creation of new group
                        group = msgin.split("-");
                        group[0] = group[0].replace("%group:","");
                        onlineUsersList2.setListData(group);
                        groupListLabel.setText("Users in your group:");
                        System.out.println("Group made!\nGroup members:");
                        voip_message_area.append("Group made!\nGroup members:\n");
                        for (int i = 0; i < group.length; i++){
                            System.out.println(group[i]);
                            voip_message_area.append(group[i]+"\n");
                        }
                        inGroup = true;
                    } else if (msgin.startsWith("%groupMsg:")) {
                        // Route for displaying group messages on VoIP tab
                        msgin = msgin.replace("%groupMsg:","");
                        voip_message_area.append(msgin+"\n");
                    } else if (msgin.startsWith("*listenVn:")) {
                        // Listen for incoming voice note data
                        Thread udpListener = new Thread(new Runnable() {
                            public void run() {
                                voiceNoteListener();
                            }
                        });
                        udpListener.start();
                        
                        String[] msgSplit = msgin.split(":");
                        String sender = msgSplit[1];
                        System.out.println(sender+" sent you a voice note!");
                        voip_message_area.append(sender+" sent you a voice note!\n");
                    } else if (msgin.startsWith("$updateUsername:")) {
                        // Handle the changing of a username and updating
                        // it for all users
                        String[] update = msgin.split(":");
                        String originalName = update[1];
                        String newName = update[2];
                        if(!update[3].contains("-")){
                            clients[0] = update[3];
                        } else {
                            clients = update[3].split("-");
                        }
                        
                        onlineUsersList1.setListData(clients);
                        System.out.println("Original name = "+originalName+ ", new name = "+newName+ ", this user = "+username);
                        if (originalName.equals(username)){
                            username = newName;
                            setTitle("VoIP Chatroom - " + newName);
                            System.out.println("This user's name has changed to: "+username);
                        }
                        if (inGroup == true) {
                            for (int i = 0; i < group.length; i++){
                                if(group[i].equals(originalName)){
                                    group[i] = newName;
                                    Arrays.sort(group);
                                    onlineUsersList2.setListData(group);
                                    voip_message_area.append(originalName + " renamed themself to " + newName+"\n");
                                    break;
                                }
                            }
                        } else {
                            onlineUsersList2.setListData(clients);
                        }
                    } else if (msgin.startsWith("nameNotUnique:")) {
                        // Send username not unique message to client
                        String[] msginSplit = msgin.split(":");
                        if (inGroup == true) {
                            voip_message_area.append(msginSplit[1]+"\n");
                        }
                        message_area.append("\n"+msginSplit[1]+"\n");
                    } else if (msgin.startsWith("#listenCall:")) {
                        // Send microphone audio to Multicast group and listen
                        // for incoming audio from other group members
                        multicastMicAudio();
                        Thread call = new Thread(new Runnable() {
                            public void run() {
                                callListener();
                            }
                        });
                        call.start();
                        String[] msginSplit = msgin.split(":");
                        String initiator = msginSplit[1];
                        voip_message_area.append(initiator + " has started a call\n");
                    } else if (msgin.startsWith("#callEnd:")) {
                        // Display user left call message
                        String[] msginSplit = msgin.split(":");
                        String user = msginSplit[1];
                        voip_message_area.append(user + " has left the call\n");
                    } else {
                        message_area.setText(message_area.getText() + "\n" + msgin);
                    }
                }
            } catch (Exception e) {
                shutdown();
            }
        }
    }

    /** 
     * This method creates a new Multicast socket for group call and
     * listens for and receives packets during a call.
     */
    public void callListener() {
        try {
            startCallButton.setText("End Call");
            voip_message_area.append("Initiating call\n");

            groupCallMultiSocket = new MulticastSocket(4321);
            InetAddress groupCallAddr = InetAddress.getByName(multiCastIP);
            groupCallMultiSocket.joinGroup(groupCallAddr);
            groupCallMultiSocket.setLoopbackMode(true);

            while (callFlag) {
                byte[] callBuffer = new byte[bufferSize];
                DatagramPacket callPacket = new DatagramPacket(callBuffer, bufferSize);
                groupCallMultiSocket.receive(callPacket);
                ByteArrayOutputStream b = new ByteArrayOutputStream();
                b.write(callBuffer);
                b.close();
                playAudio(b);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    /** 
     * This method captures audio input from a microphone and saves it in a
     * ByteArrayOutputStream object.
     */
    private void captureAudio(){
        try{
            //Get everything set up for capture
            AudioFormat audioFormat = new AudioFormat(44100, 16, 1, true, false);

            DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
            if(!AudioSystem.isLineSupported(dataLineInfo)) {
                System.out.println("Not supported.");
            }
            
            //Get a TargetDataLine on the selected mixer.
            targetDataLine = (TargetDataLine)AudioSystem.getLine(dataLineInfo);
            //Prepare the line for use.
            targetDataLine.open();
            targetDataLine.start();

            //Create a thread to capture the microphone
            // data and start it running.  It will run
            // until the Stop button is clicked.
            Thread captureThread = new CaptureThread();
            captureThread.start();
        } catch (Exception e) {
            System.out.println(e);
        }//end catch
    }//end captureAudio method
    
    /** 
     * Inner class to capture data from microphone 
     */
    class CaptureThread extends Thread {
        //An arbitrary-size temporary holding buffer
        byte tempBuffer[] = new byte[10000];
        
        @Override
        public void run(){

            byteArrayOutputStream = new ByteArrayOutputStream();
            stopCapture = false;
            try{//Loop until stopCapture is set by
                // another thread that services the Stop
                // button.
                while(stopCapture == false){
                    //Read data from the internal buffer of
                    // the data line.
                    int cnt = targetDataLine.read(tempBuffer, 0, tempBuffer.length);
                    if(cnt > 0){
                        //Save data in output stream object.
                        byteArrayOutputStream.write(tempBuffer, 0, cnt);
                    }//end if
                }//end while
                
                byteArrayOutputStream.close();
                targetDataLine.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        }//end run
    }//end inner class CaptureThread
    
    /** 
     * This method plays back the ByteArrayOutputStream audio data that is
     * given to it.
     * @param byteArrayOutputStream the audio data
     */
    private void playAudio(ByteArrayOutputStream byteArrayOutputStream) {
        try{
            //Get everything set up for playback.
            //Get the previously-saved data into a byte array object.
            byte audioData[] = byteArrayOutputStream.toByteArray();
            //Get an input stream on the byte array containing the data
            InputStream byteArrayInputStream = new ByteArrayInputStream(audioData);
            AudioFormat audioFormat = new AudioFormat(44100, 16, 1, true, false);
            audioInputStream = new AudioInputStream(byteArrayInputStream, audioFormat, audioData.length/audioFormat.getFrameSize());
            
            DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, audioFormat);
            sourceDataLine = (SourceDataLine)AudioSystem.getLine(dataLineInfo);
            sourceDataLine.open(audioFormat);
            sourceDataLine.start();

            //Create a thread to play back the data and
            // start it  running.  It will run until
            // all the data has been played back.
            
            Thread playThread = new PlayThread();
            playThread.start();
        } catch (Exception e) {
            System.out.println(e);
            System.exit(0);
        }//end catch
    }//end playAudio
    
    /**
     * Inner class to play back the given audio data.
     */
    class PlayThread extends Thread {
        byte tempBuffer[] = new byte[10000];
        @Override
        public void run(){
            
            try{
                int cnt;
                //Keep looping until the input read method
                // returns -1 for empty stream.
                while((cnt = audioInputStream.read(tempBuffer, 0, tempBuffer.length)) != -1){
                    if(cnt > 0){
                        //Write data to the internal buffer of
                        // the data line where it will be
                        // delivered to the speaker.
                        sourceDataLine.write(tempBuffer,0,cnt);
                    }//end if
                }//end while
                //Block and wait for internal buffer of the
                // data line to empty.
                sourceDataLine.drain();
                sourceDataLine.close();
            }catch (Exception e) {
                System.out.println(e);
                System.exit(0);
            }//end catch
        }//end run
    }//end inner class PlayThread
    
    public static void main(String args[]) {
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientWindow().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton createGroupButton;
    private javax.swing.JLabel groupListLabel;
    private javax.swing.JTextField hostAddressField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea message_area;
    private javax.swing.JTextField message_text;
    private javax.swing.JList<String> onlineUsersList1;
    private javax.swing.JList<String> onlineUsersList2;
    private javax.swing.JButton playVNButton;
    private javax.swing.JTextField portField;
    private javax.swing.JButton recordVNButton;
    private javax.swing.JButton saveReceivedVNBtn;
    private javax.swing.JButton saveVNButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton sendVNButton;
    private javax.swing.JButton startCallButton;
    private javax.swing.JButton stopRecButton;
    private javax.swing.JTextField udpPortField;
    private javax.swing.JTextField usernameField;
    private javax.swing.JButton vnInboxButton;
    private javax.swing.JTextArea voip_message_area;
    private javax.swing.JTextField voip_message_text;
    private javax.swing.JButton voip_sendButton;
    // End of variables declaration//GEN-END:variables
}
