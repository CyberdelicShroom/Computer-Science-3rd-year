/**This file/class contains the process of receiving a file over the 
 * network by TCP. It reads in the byte array of the file data sent 
 * from the sender and writes it to the buffered file output stream 
 * to save the file on the machine. The code generated by the Netbeans
 * IDE which handles the GUI is also present in this class. This class 
 * also contains the code, that had to be manually implemented, which
 * handles the operations that occur upon clicking the button on the GUI.
 * 
 * @author Keagan Selwyn Gill
 **/

import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.Socket;

/**
 *
 * @author Keagan
 */
public class TCPReceiverWindow extends javax.swing.JFrame {
    static String host;
    static int port;
    static Boolean flag = false;
    static Socket socket = null;
    static InputStream is = null;
    static DataInputStream dis = null;
    int click = 0;
    /**
     * Creates new form TCPSenderWindow
     */
    public TCPReceiverWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hostAddressField = new javax.swing.JTextField();
        portField = new javax.swing.JTextField();
        receiveFileButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("TCP Receiver");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Enter host address:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Enter Port:");

        receiveFileButton.setText("Receive File");
        receiveFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiveFileButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receiveFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hostAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(receiveFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** This method executes when the user clicks the receive file button.
     *  It stores the input from the user given in the two input fields
     *  for the host address and port. It also sets a Boolean flag to 
     *  true to instruct the program to receive another file. A new socket
     *  is created for connection to the sender as well as a new data input
     *  stream. A variable called 'click' is incremented once when the initial
     *  connection is made so that a new socket and data input stream is only
     *  created once.
     **/
    private void receiveFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiveFileButtonMouseClicked
        host = hostAddressField.getText();
        port = Integer.parseInt(portField.getText());
        flag = true;
        if (click < 1) {
            click++;
            try {
                socket = new Socket(InetAddress.getByName(host), port);
                is = socket.getInputStream();
                dis = new DataInputStream(is);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_receiveFileButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCPReceiverWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCPReceiverWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCPReceiverWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCPReceiverWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCPReceiverWindow().setVisible(true);
            }
        });
        
        String fileName;
        String fileSaveDirectory = "./";
        File file = null;
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;
        // This loop listens for input from the user, i.e., when the
        // user clicks the select file button. The sleep method
        // in the Thread class is called to cause the current thread
        // to suspend execution for 100 milliseconds. This is because 
        // the while loop iterates so fast that the program cannot
        // receive the instruction to interrupt the loop in order to
        // execute the necessary procedures for file transfer.
        while (true) {
            try {
                //System.out.println("Listening...");
                Thread.sleep(100);
                if (flag == true) {
                    // Create a byte array to store the bytes of the file.
                    byte[] contents = new byte[10000];
                    // Receive the file name from the sender
                    fileName = dis.readUTF();
                    System.out.println("FILE NAME = " + fileName);
                    // Create a new file variable and buffered file output
                    // stream
                    file = new File(fileSaveDirectory + fileName);
                    fos = new FileOutputStream(file);           
                    bos = new BufferedOutputStream(fos);
                    // Receive the file size from the sender
                    long fileSize = dis.readLong();
                    System.out.println("FILE SIZE = " + fileSize + " bytes");
                    //No of bytes read in one read() call          
                    int bytesRead = 0;
                    int sum = 0;
                    // Initialize the progress bar of the GUI by setting its
                    // initial value to 0, displaying the percentage text and
                    // setting the maximum value of the bar to the file size
                    progressBar.setValue(0);
                    progressBar.setStringPainted(true);
                    progressBar.setMaximum((int)fileSize);
                    // This is the algorithm that receives the file from the
                    // sender via TCP. It does so in seperate chunks of the 
                    // file. It also updates the progress bar on the GUI. The
                    // received data of the file is written to a new file on
                    // the local machine by the use of the buffered file 
                    // output stream.
                    while(true) {
                        bytesRead=is.read(contents);
                        sum += bytesRead;
                        progressBar.setValue(sum);
                        bos.write(contents, 0, bytesRead);
                        if(sum == fileSize) {
                            System.out.println("EOF reached: " + sum);
                            break;
                        }
                    }
                    bos.flush();
                    System.out.println("File saved successfully!");
                    flag = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField hostAddressField;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField portField;
    private static javax.swing.JProgressBar progressBar;
    private javax.swing.JButton receiveFileButton;
    // End of variables declaration//GEN-END:variables
}
